import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../hooks/useAuth.ts';
import { apiClient } from '../../shared/utils/api/Api.tsx';
import { showSuccessAlert, showErrorAlert, showConfirmAlert, showDeleteConfirmAlert } from '../../shared/utils/sweetAlert';

interface UserInfo {
    nickname: string;
    email: string;
    loginType: string;
    isNewUser: boolean;
}

const MyPage: React.FC = () => {
    const { logout } = useAuth();
    const [userInfo, setUserInfo] = useState<UserInfo | null>(null);
    const [isEditing, setIsEditing] = useState(false);
    const [editedNickname, setEditedNickname] = useState('');
    const [isSaving, setIsSaving] = useState(false);

    useEffect(() => {
        const storedUserInfo = localStorage.getItem('userInfo');
        if (storedUserInfo) {
            const parsedUserInfo = JSON.parse(storedUserInfo);
            setUserInfo(parsedUserInfo);
            setEditedNickname(parsedUserInfo.nickname || '');
        }
    }, []);

    const handleEditNickname = () => {
        setIsEditing(true);
    };

    const handleSaveNickname = async () => {
        if (!editedNickname.trim()) {
            showErrorAlert('ÏûÖÎ†• Ïò§Î•ò', 'ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        if (editedNickname === userInfo?.nickname) {
            setIsEditing(false);
            return;
        }

        setIsSaving(true);
        try {
            // apiClientÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏
            await apiClient.put('/account/nickname', {
                nickname: editedNickname
            });
            
            // localStorageÏùò userInfoÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
            if (userInfo) {
                const updatedUserInfo = { ...userInfo, nickname: editedNickname };
                localStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));
                setUserInfo(updatedUserInfo);
                
                // Ïª§Ïä§ÌÖÄ Ïù¥Î≤§Ìä∏ Î∞úÏÉùÏúºÎ°ú Îã§Î•∏ Ïª¥Ìè¨ÎÑåÌä∏Ïóê ÎãâÎÑ§ÏûÑ Î≥ÄÍ≤Ω ÏïåÎ¶º
                window.dispatchEvent(new CustomEvent('userInfoChange'));
            }
            
            setIsEditing(false);
            showSuccessAlert('Î≥ÄÍ≤Ω ÏôÑÎ£å', 'ÎãâÎÑ§ÏûÑÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.');
        } catch (error) {
            console.error('ÎãâÎÑ§ÏûÑ Î≥ÄÍ≤Ω Ïã§Ìå®:', error);
            showErrorAlert('Î≥ÄÍ≤Ω Ïã§Ìå®', 'ÎãâÎÑ§ÏûÑ Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        } finally {
            setIsSaving(false);
        }
    };

    const handleCancelEdit = useCallback(() => {
        setEditedNickname(userInfo?.nickname || '');
        setIsEditing(false);
    }, [userInfo?.nickname]);

    // ESC ÌÇ§Î°ú Ìé∏Ïßë Ï∑®ÏÜå
    useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
            if (event.key === 'Escape' && isEditing) {
                handleCancelEdit();
            }
            // Enter ÌÇ§Î°ú Ï†ÄÏû•
            if (event.key === 'Enter' && isEditing) {
                event.preventDefault();
                handleSaveNickname();
            }
        };

        if (isEditing) {
            document.addEventListener('keydown', handleKeyDown);
        }

        return () => {
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [isEditing, handleCancelEdit]);

    const getLoginTypeDisplay = (loginType: string) => {
        switch (loginType.toUpperCase()) {
            case 'KAKAO':
                return 'Ïπ¥Ïπ¥Ïò§';
            case 'GOOGLE':
                return 'Íµ¨Í∏Ä';
            case 'NAVER':
                return 'ÎÑ§Ïù¥Î≤Ñ';
            default:
                return loginType;
        }
    };

    if (!userInfo) {
        return (
            <div className="h-full bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <p className="text-gray-500">ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="h-full bg-gray-50 py-12 px-4 content-center">
            <div className="max-w-2xl mx-auto">
                <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                    {/* Ìó§Îçî */}
                    <div className="bg-indigo-600 px-6 py-8">
                        <div className="flex items-center">
                            <div className="w-20 h-20 bg-white rounded-full flex items-center justify-center text-3xl font-bold text-indigo-600">
                                {userInfo.nickname.charAt(0).toUpperCase()}
                            </div>
                            <div className="ml-6">
                                <h1 className="text-3xl font-bold text-white">ÎßàÏù¥ÌéòÏù¥ÏßÄ</h1>
                                <p className="text-indigo-100 mt-2">Í≥ÑÏ†ï Ï†ïÎ≥¥ Í¥ÄÎ¶¨</p>
                            </div>
                        </div>
                    </div>

                    {/* ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ */}
                    <div className="p-6 space-y-6">
                        {/* ÎãâÎÑ§ÏûÑ */}
                        <div className="flex items-center justify-between py-4 border-b border-gray-200">
                            <div>
                                <label className="text-sm font-medium text-gray-700 block mb-1">
                                    ÎãâÎÑ§ÏûÑ
                                </label>
                                {isEditing ? (
                                    <>
                                        <div className="relative">
                                            <input
                                                type="text"
                                                value={editedNickname}
                                                onChange={(e) => setEditedNickname(e.target.value)}
                                                className="text-lg text-gray-900 border border-gray-300 rounded-md px-3 py-2 pr-16 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 w-full"
                                                placeholder="ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                                aria-label="ÎãâÎÑ§ÏûÑ Ìé∏Ïßë"
                                                autoFocus
                                                maxLength={20}
                                                disabled={isSaving}
                                            />
                                            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-gray-400">
                                                {editedNickname.length}/20
                                            </div>
                                        </div>
                                        <p className="text-xs text-gray-500 mt-1">
                                            üí° ESCÌÇ§: Ï∑®ÏÜå | EnterÌÇ§: Ï†ÄÏû•
                                        </p>
                                    </>
                                ) : (
                                    <p className="text-lg text-gray-900">{userInfo.nickname}</p>
                                )}
                            </div>
                            <div className="flex space-x-2">
                                {isEditing ? (
                                    <>
                                        <button
                                            onClick={handleSaveNickname}
                                            disabled={isSaving || !editedNickname.trim() || editedNickname === userInfo?.nickname}
                                            className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors text-sm disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center"
                                            aria-label="ÎãâÎÑ§ÏûÑ Ï†ÄÏû•"
                                        >
                                            {isSaving && (
                                                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                                </svg>
                                            )}
                                            {isSaving ? 'Ï†ÄÏû• Ï§ë...' : 'Ï†ÄÏû•'}
                                        </button>
                                        <button
                                            onClick={handleCancelEdit}
                                            disabled={isSaving}
                                            className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors text-sm disabled:bg-gray-400 disabled:cursor-not-allowed"
                                            aria-label="Ìé∏Ïßë Ï∑®ÏÜå"
                                        >
                                            Ï∑®ÏÜå
                                        </button>
                                    </>
                                ) : (
                                    <button
                                        onClick={handleEditNickname}
                                        className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors text-sm"
                                        aria-label="ÎãâÎÑ§ÏûÑ ÏàòÏ†ï"
                                    >
                                        ÏàòÏ†ï
                                    </button>
                                )}
                            </div>
                        </div>

                        {/* Ïù¥Î©îÏùº */}
                        <div className="py-4 border-b border-gray-200">
                            <label className="text-sm font-medium text-gray-700 block mb-1">
                                Ïù¥Î©îÏùº
                            </label>
                            <p className="text-lg text-gray-900">{userInfo.email}</p>
                        </div>

                        {/* Î°úÍ∑∏Ïù∏ Î∞©Ïãù */}
                        <div className="py-4 border-b border-gray-200">
                            <label className="text-sm font-medium text-gray-700 block mb-1">
                                Î°úÍ∑∏Ïù∏ Î∞©Ïãù
                            </label>
                            <div className="flex items-center">
                                <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                                    {getLoginTypeDisplay(userInfo.loginType)}
                                </span>
                            </div>
                        </div>

                        {/* Í≥ÑÏ†ï Í¥ÄÎ¶¨ */}
                        <div className="py-4">
                            <label className="text-sm font-medium text-gray-700 block mb-3">
                                Í≥ÑÏ†ï Í¥ÄÎ¶¨
                            </label>
                            <div className="space-y-3">
                                <button
                                    onClick={async () => {
                                        const result = await showConfirmAlert('Î°úÍ∑∏ÏïÑÏõÉ', 'Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉÌïòÏãúÍ≤†ÏäµÎãàÍπå?');
                                        if (result.isConfirmed) {
                                            logout();
                                        }
                                    }}
                                    className="w-full px-4 py-3 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors font-medium"
                                    aria-label="Î°úÍ∑∏ÏïÑÏõÉ"
                                >
                                    Î°úÍ∑∏ÏïÑÏõÉ
                                </button>
                                <button
                                    onClick={async () => {
                                        const firstConfirm = await showDeleteConfirmAlert('‚ö†Ô∏è Í≥ÑÏ†ï ÏÇ≠Ï†ú Í≤ΩÍ≥†', 'Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÎ©¥ Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.\n\nÏ†ïÎßêÎ°ú Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?');
                                        if (firstConfirm.isConfirmed) {
                                            const finalConfirm = await showDeleteConfirmAlert('ÎßàÏßÄÎßâ ÌôïÏù∏', 'Í≥ÑÏ†ï ÏÇ≠Ï†úÎ•º ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.');
                                            if (finalConfirm.isConfirmed) {
                                                try {
                                                    // apiClientÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Í≥ÑÏ†ï ÏÇ≠Ï†ú
                                                    await apiClient.delete('/account');

                                                    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ïÎ¶¨
                                                    localStorage.removeItem('accessToken');
                                                    localStorage.removeItem('tempToken');
                                                    localStorage.removeItem('userInfo');
                                                    
                                                    await showSuccessAlert('ÏÇ≠Ï†ú ÏôÑÎ£å', 'Í≥ÑÏ†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                                                    
                                                    // ÌôàÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                                                    window.location.href = '/';
                                                } catch (error) {
                                                    console.error('Í≥ÑÏ†ï ÏÇ≠Ï†ú Ïã§Ìå®:', error);
                                                    showErrorAlert('ÏÇ≠Ï†ú Ïã§Ìå®', 'Í≥ÑÏ†ï ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                                                }
                                            }
                                        }
                                    }}
                                    className="w-full px-4 py-3 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors font-medium"
                                    aria-label="Í≥ÑÏ†ï ÏÇ≠Ï†ú"
                                >
                                    Í≥ÑÏ†ï ÏÇ≠Ï†ú
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default MyPage;